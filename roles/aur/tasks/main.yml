- name: Define known AUR helpers
  ansible.builtin.set_fact:
    known_aur_helpers:
      - name: yay
        check_file: /usr/bin/yay
      - name: paru
        check_file: /usr/bin/paru

# 1. Discover current state
- name: Check which known AUR helpers are installed
  ansible.builtin.stat:
    path: "{{ item.check_file }}"
  loop: "{{ known_aur_helpers }}"
  register: installed_helpers_stat

- name: Create list of installed AUR helper names
  ansible.builtin.set_fact:
    installed_helpers: "{{ installed_helpers_stat.results | selectattr('stat.exists') | map(attribute='item') | map(attribute='name') | list }}"

# 2. Get desired state
- name: Create list of desired AUR helper names
  ansible.builtin.set_fact:
    desired_helpers: "{{ final_aur_helpers | default([]) }}"

# 3. Calculate difference
- name: Determine which helpers to install
  ansible.builtin.set_fact:
    helpers_to_install: "{{ desired_helpers | difference(installed_helpers) }}"

- name: Determine which helpers to remove
  ansible.builtin.set_fact:
    helpers_to_remove: "{{ installed_helpers | difference(desired_helpers) }}"

- name: debug helpers to install and remove
  ansible.builtin.debug:
    msg:
      - "Helpers to install: {{ helpers_to_install }}"
      - "Helpers to remove: {{ helpers_to_remove }}"

# 4. Execute actions
- name: Install missing AUR helpers
  ansible.builtin.include_tasks: install_helper.yml
  loop: "{{ helpers_to_install }}"
  loop_control:
    loop_var: aur_helper_item_name
  vars:
    aur_helper_item: "{{ known_aur_helpers | selectattr('name', 'equalto', aur_helper_item_name) | first }}"

- name: Remove unwanted AUR helpers
  community.general.pacman:
    name: "{{ item }}"
    state: absent
  loop: "{{ helpers_to_remove }}"
  become: true
