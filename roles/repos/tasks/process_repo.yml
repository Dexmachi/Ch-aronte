- name: "Process third-party repo [{{ repo_item.name }}] - state: {{ repo_item.state | default('present') }}"
  block:
    # Installation logic
    - name: "Install {{ repo_item.name }}"
      when: repo_item.state | default('present') == 'present'
      block:
        - name: "Install {{ repo_item.name }} (type: script)"
          when: repo_item.type == 'script'
          block:
            - name: "Run install script for {{ repo_item.name }}"
              ansible.builtin.command:
                cmd: "{{ repo_item.install_script }}"
              when: repo_item.install_script is defined and repo_item.install_script | length > 0
              become: true

        - name: "Install {{ repo_item.name }} (type: aur_bootstrap)"
          when: repo_item.type == 'aur_bootstrap'
          block:
            - name: Clone {{ repo_item.name }} repo
              ansible.builtin.git:
                repo: "https://aur.archlinux.org/{{ repo_item.name }}.git"
                dest: "/tmp/{{ repo_item.name }}"
                clone: true
                update: true
              become: true
              become_user: "{{ final_users[0].name }}"

            - name: Build and install {{ repo_item.name }}
              ansible.builtin.command:
                cmd: "makepkg -si --noconfirm"
              args:
                chdir: "/tmp/{{ repo_item.name }}"
                creates: "{{ repo_item.check_file }}"
              become: true
              become_user: "{{ final_users[0].name }}"

            - name: Clean up {{ repo_item.name }} build files
              ansible.builtin.file:
                path: "/tmp/{{ repo_item.name }}"
                state: absent

    # Uninstallation logic
    - name: "Uninstall {{ repo_item.name }}"
      when: repo_item.state == 'absent'
      block:
        - name: "Uninstall {{ repo_item.name }} (type: script)"
          when: repo_item.type == 'script'
          block:
            - name: "Run uninstall script for {{ repo_item.name }}"
              ansible.builtin.command:
                cmd: "{{ repo_item.uninstall_script }}"
              when: repo_item.uninstall_script is defined and repo_item.uninstall_script | length > 0
              become: true

        - name: "Uninstall {{ repo_item.name }} (type: aur_bootstrap)"
          when: repo_item.type == 'aur_bootstrap'
          community.general.pacman:
            name: "{{ repo_item.name }}"
            state: absent
          become: true