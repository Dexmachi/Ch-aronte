- name: "Clonando o repo: {{ dotfile_item.repo }}"
  ansible.builtin.git:
    repo: "{{ dotfile_item.repo }}"
    dest: "/home/{{ nome_user }}/.dotfiles/{{ dotfile_item.repo | urlsplit('path') | basename }}"
    version: main
    accept_hostkey: true
  become: true
  become_user: "{{ nome_user }}"
  register: git_clone_result

- name: "Executando comando de instalação custom"
  ansible.builtin.shell:
    cmd: "{{ dotfile_item.install_command }}"
    chdir: "{{ git_clone_result.dest }}"
  when: dotfile_item.install_command is defined and dotfile_item.install_command | length > 0
  become: true
  changed_when: false
  become_user: "{{ nome_user }}"

- name: "Aplicando dotfiles com o gerenciador: {{ dotfile_item.manager | default('Nenhum') }}"
  ansible.builtin.shell:
    cmd: |
      {% if dotfile_item.manager == 'stow' %}
      stow --target=/home/{{ nome_user }} --dir=. *
      {% elif dotfile_item.manager == 'yadm' %}
      echo "yadm not implemented yet, please use stow."
      {% endif %}
    chdir: "{{ git_clone_result.dest }}"
  when: dotfile_item.manager is defined and dotfile_item.manager | length > 0
  become: true
  changed_when: false
  become_user: "{{ nome_user }}"

- name: "Verificar se 'install.sh' existe no repositório"
  ansible.builtin.stat:
    path: "{{ git_clone_result.dest }}/install.sh"
  register: install_script_stat
  when:
    - dotfile_item.install_command is not defined
    - dotfile_item.manager is not defined
  become: true
  become_user: "{{ nome_user }}"

- name: "Executar script de instalação padrão (install.sh) se encontrado"
  ansible.builtin.shell:
    cmd: "bash install.sh"
    chdir: "{{ git_clone_result.dest }}"
  when: install_script_stat.stat.exists
  become: true
  changed_when: false
  become_user: "{{ nome_user }}"
