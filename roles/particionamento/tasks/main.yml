- name: "Garantir que as dependências (parted) estejam instaladas"
  community.general.pacman:
    name: parted
    state: present
  become: true

- name: "Criar tabela de partição (GPT p/ UEFI, MBR p/ BIOS) e criar cada partição"
  community.general.parted:
    device: "{{ particoes.disk }}"
    number: "{{ item.part }}"
    name: "{{ item.name }}"
    state: present
    label: "{{ 'gpt' if firmware == 'UEFI' else 'msdos' }}"
    part_end: "{{ item.size }}"
    flags: "{{ ['boot', 'esp'] if item.important == 'boot' and firmware == 'UEFI' else [] }}"
  loop: "{{ particoes.partitions }}"
  loop_control:
    loop_var: item
  become: true

- name: "Formatar partições de dados (ext4, btrfs, etc) com label"
  community.general.filesystem:
    fstype: "{{ item.type }}"
    dev: "{{ particoes.disk }}{{ 'p' if 'nvme' in particoes.disk else '' }}{{ item.part }}"
    opts: "-L {{ item.name }}"
  loop: "{{ particoes.partitions }}"
  loop_control:
    loop_var: item
  when: item.type in ['ext4', 'btrfs', 'xfs', 'ext3', 'ext2'] and item.important not in ["boot", "swap"]
  become: true

- name: "Formatar partição de BOOT (fat32) com label"
  community.general.filesystem:
    fstype: "{{ 'vfat' if item.type in ['fat32', 'fat16', 'vfat'] else item.type }}"
    dev: "{{ particoes.disk }}{{ 'p' if 'nvme' in particoes.disk else '' }}{{ item.part }}"
    opts: "-n {{ item.name }}"
  loop: "{{ particoes.partitions }}"
  loop_control:
    loop_var: item
  when: item.type in ['fat32', 'fat16', 'vfat']
  become: true

- name: "Criar e formatar partição SWAP com label"
  community.general.filesystem:
    fstype: "swap"
    dev: "{{ particoes.disk }}{{ 'p' if 'nvme' in particoes.disk else '' }}{{ item.part }}"
    opts: "-L {{ item.name }}"
  loop: "{{ particoes.partitions | selectattr('type', 'equalto', 'linux-swap') }}"
  become: true

- name: "Montar sistemas de arquivos via LABEL"
  ansible.posix.mount:
    path: "/mnt{{ item.mountpoint }}"
    src: "LABEL={{ item.name }}"
    fstype: "{{ 'vfat' if item.type in ['fat32', 'fat16', 'vfat'] else item.type }}"
    state: mounted
  loop: "{{ particoes.partitions | selectattr('mountpoint', 'defined') }}"
  loop_control:
    loop_var: item
  become: true

- name: "Ativar SWAP via LABEL"
  ansible.builtin.command:
    cmd: "swapon LABEL={{ item.name }}"
  loop: "{{ particoes.partitions | selectattr('type', 'equalto', 'linux-swap') }}"
  changed_when: true
  become: true
