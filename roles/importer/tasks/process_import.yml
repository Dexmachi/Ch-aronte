- name: "Check if imported file '{{ import_item.file }}' exists"
  ansible.builtin.stat:
    path: "Ch-obolos/{{ import_item.file }}"
  register: imported_file_stat

- name: "Fail if imported file '{{ import_item.file }}' does not exist"
  ansible.builtin.fail:
    msg: "O arquivo '{{ import_item.file }}' listado para importação não foi encontrado no diretório 'Ch-obolos/'."
  when: not imported_file_stat.stat.exists

- name: "Load data from '{{ import_item.file }}'"
  ansible.builtin.set_fact:
    imported_data: "{{ lookup('file', 'Ch-obolos/' + import_item.file) | from_yaml }}"

# --- Strategy: override ---
- name: "Apply 'override' strategy for {{ import_item.file }}"
  ansible.builtin.set_fact:
    final_config: "{{ final_config | combine(imported_data) }}"
  when: import_item.strategy == 'override'

# --- Strategy: combine (deep merge) ---
- name: "Apply 'combine' (deep merge) strategy for {{ import_item.file }}"
  ansible.builtin.set_fact:
    final_config: "{{ final_config | combine(imported_data, recursive=true) }}"
  when: import_item.strategy == 'combine'

# --- Strategy: merge (custom list merge) ---
- name: "Apply 'merge' strategy for {{ import_item.file }}"
  when: import_item.strategy == 'merge'
  block:
    - name: "Merge: Combine non-list keys recursively"
      ansible.builtin.set_fact:
        temp_config: "{{ final_config | combine(imported_data, recursive=true) }}"

    - name: "Merge: Unify and deduplicate specific lists for {{ import_item.file }}"
      ansible.builtin.set_fact:
        temp_config: "{{ temp_config | combine({item: merged_list}) }}"
      vars:
        list1: "{{ final_config[item] | default([]) }}"
        list2: "{{ imported_data[item] | default([]) }}"
        merged_list: "{{ (list1 + list2) | unique }}"
      loop: "{{ import_item.merge_keys | default([]) }}"
      when:
        - final_config[item] is defined and (final_config[item] | type_debug) == 'list'
        - imported_data[item] is defined and (imported_data[item] | type_debug) == 'list'

    - name: "Finalize merge step"
      ansible.builtin.set_fact:
        final_config: "{{ temp_config }}"
