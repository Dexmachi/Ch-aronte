- name: Define Hostname
  ansible.builtin.copy:
    content: "{{ hostname}}\n"
    dest: "/etc/hostname"
    mode: "0644"
  become: true

# btw, this fucking thing is bullshit
# THERE IS A GODDAMN ansible.builtin.hostname
# BUT IT DOESNT WORK INSIDE OF AN CHROOT FOR SOME REASON
# It's literally the only case where this happens
# this copy: is ugly as fuck, but it works wonders

- name: Get current list of users in the system
  ansible.builtin.getent:
    database: passwd
  register: current_users

- name: Initialize system_users list
  ansible.builtin.set_fact:
    system_users: []

- name: Filter system users
  ansible.builtin.set_fact:
    system_users: "{{ system_users + [item.key] }}"
  loop: "{{ current_users.ansible_facts.getent_passwd
            | dict2items }}"
  when: "item.value[1] | int < 1000 and item.value[1] | int > 0 and item.value[1] | int != 65534"

- name: Determine users to remove
  ansible.builtin.set_fact:
    users_to_remove: "{{ (current_users.ansible_facts.getent_passwd.keys() | list)
                          | difference(users | map(attribute='name') | list)
                          | difference(system_users)
                          | difference(['nobody']) }}"
  when: users is defined

- name: Remove users not in users
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
    remove: false
  loop: "{{ users_to_remove }}"
  when:
    - users is defined
    - users_to_remove is defined
    - users_to_remove | length > 0

- name: Validate secrets file configuration
  ansible.builtin.assert:
    that:
      - "(lookup('file', secrets.sec_file) | from_yaml).sops is not defined"
    fail_msg: "The file '{{ secrets.sec_file }}' seems to have been criptographed with sops, however, secrets.sec_mode is '{{ secrets.sec_mode }}', please verify your config"
  when: secrets.sec_mode != 'sops'

# - name: debug show users passwords
#   ansible.builtin.debug:
#     var: user_secrets_content
#   loop: "{{ users }}"
#   vars:
#     user_secrets_content: "{{ lookup('pipe', 'sops --decrypt ' + secrets.sec_file)
#                            if secrets.sec_mode == 'sops'
#                            else lookup('file', secrets.sec_file) }}"
#     user_secrets: "{{ (user_secrets_content | join('') | from_yaml).user_secrets }}"
#
# - name: Get shadow entries
#   ansible.builtin.getent:
#     database: shadow
#   register: shadow_entries
#   become: true
#
# - name: Compare passwords
#   ansible.builtin.debug:
#     msg:
#       - "User: {{ item.name }}"
#       - "Password from secrets file: {{ user_secrets[item.name].password | default('Not found') }}"
#       - "Password from getent shadow: {{ shadow_entries.ansible_facts.getent_shadow[item.name][0] if item.name in shadow_entries.ansible_facts.getent_shadow else 'User not in shadow' }}"
#   loop: "{{ users }}"
#   vars:
#     user_secrets_content: "{{ lookup('pipe', 'sops --decrypt ' + secrets.sec_file)
#                            if secrets.sec_mode == 'sops'
#                            else lookup('file', secrets.sec_file) }}"
#     user_secrets: "{{ (user_secrets_content | join('') | from_yaml).user_secrets }}"
#   when:
#     - shadow_entries.ansible_facts.getent_shadow is defined

- name: Make sure users exist
  become: true
  ansible.builtin.user:
    name: "{{ (item.name | default('Ch-obold')) }}"
    shell: "/bin/{{ (item.shell | default('bash')) }}"
    groups: "{{ item.groups | join(',') }}"
    append: true
    create_home: true
    password: "{{ user_secrets[item.name].password
                  | default(omit)
                  if user_secrets is defined
                  and user_secrets[item.name] is defined
                  else omit }}"
  loop: "{{ users }}"
  vars:
    user_secrets_content: "{{ lookup('pipe', 'sops --decrypt ' + secrets.sec_file)
                           if secrets.sec_mode == 'sops'
                           else lookup('file', secrets.sec_file) }}"
    user_secrets: "{{ (user_secrets_content | join('') | from_yaml).user_secrets }}"
  when:
    - users is defined
    - secrets is defined
    - secrets.sec_mode is defined
    - secrets.sec_mode in ['charonte', 'sops']
    - secrets.sec_file is defined and secrets.sec_file != ""

- name: Manage sudoers
  become: true
  ansible.builtin.lineinfile:
    path: /etc/sudoers
    regexp: "{{ '^#\\s*%wheel ALL=\\(ALL:ALL\\) ALL'
                if wheel_access
                | bool else '^%wheel ALL=\\(ALL:ALL\\) ALL' }}"
    line: "{{ '%wheel ALL=(ALL:ALL) ALL'
              if wheel_access
              | bool else '#%wheel ALL=(ALL:ALL) ALL' }}"
    validate: '/usr/sbin/visudo -cf %s'
